import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from ml_engine import FAQAnswerEngine

FAQ = {
    "connect": {"question": "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–∞—É—à–Ω–∏–∫–∏?", "answer": "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —á–µ—Ä–µ–∑ Bluetooth..."},
    "reset": {"question": "–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?", "answer": "–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–µ–π—Å–µ 15 —Å–µ–∫—É–Ω–¥..."}
    # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
}

engine = FAQAnswerEngine(FAQ)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton(faq["question"], callback_data=key)] for key, faq in FAQ.items()]
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    faq = FAQ.get(query.data)
    if faq:
        await query.message.reply_text(f"‚ùì {faq['question']}\n\n{faq['answer']}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q, a = engine.find_best_match(update.message.text)
    if a:
        await update.message.reply_text(f"‚ùì {q}\n\n{a}")
    else:
        await update.message.reply_text("ü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")

if __name__ == "__main__":
    import logging
    from dotenv import load_dotenv
    load_dotenv()
    logging.basicConfig(level=logging.INFO)

    TOKEN = os.environ.get("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()
